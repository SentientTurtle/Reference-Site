package net.sentientturtle.html.context;

import net.sentientturtle.html.Document;
import net.sentientturtle.html.id.IDContext;
import net.sentientturtle.nee.data.DataSupplier;
import net.sentientturtle.nee.data.sharedcache.SharedCacheReader;
import net.sentientturtle.nee.util.ResourceSupplier;
import org.jspecify.annotations.NonNull;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;

/// HTML generation context object; Representing a single HTML document and it's scope
///
/// HTML is generated by writing to this object, through {@link #write(String)}
public abstract class HtmlContext {
    /// HTML element ID context; Enforces uniqueness of IDs
    public final IDContext ids; // TODO: Maybe inline this into HtmlContext?
    /// Folder depth for this page; 0 if this page is in the website root (Note: Not necessarily URL root, merely the root of the output)
    private final int folderDepth;
    // CSS and Javascript segments have their order retained
    private final LinkedHashSet<String> css;
    private final LinkedHashSet<String> js;
    // TODO: Rework to be less clumsy
    /// External files that need including in the output, a map of file paths to ResourceSuppliers
    private final HashMap<String, ResourceSupplier> fileDependencies;

    // EVE-specific fields; These live here because Java generic inference breaks with generic HTML and Element, otherwise HtmlContext could have a generic type for data extension
    public final DataSupplier data;
    public final SharedCacheReader sharedCache;

    public HtmlContext(int folderDepth, IDContext ids, DataSupplier data, SharedCacheReader sharedCache) {
        this.ids = ids;
        this.data = data;
        this.folderDepth = folderDepth;
        this.sharedCache = sharedCache;
        this.css = new LinkedHashSet<>();
        this.js = new LinkedHashSet<>();
        this.fileDependencies = new HashMap<>();
    }

    /**
     * @param absolutePath Target path, "absolute" from the website root
     * @return Relative path from this page to {@code absolutePath}
     */
    public String pathTo(@NonNull String absolutePath) {
        return "../".repeat(folderDepth) + absolutePath;
    }

    /**
     * @param document Document to link to
     * @return Relative path from this page to {@code document}
     */
    public String pathTo(@NonNull Document document) {
        return "../".repeat(folderDepth) + document.getPath();
    }

    /**
     * @param css CSS segment to register
     */
    public void registerCSS(@NonNull String css) {
        this.css.add(css);
    }

    /**
     * @param javascript Javascript segment to register
     */
    public void registerJavascript(@NonNull String javascript) {
        this.js.add(javascript);
    }

    /// Add a file dependency for this page
    public void addFileDependency(String path, ResourceSupplier supplier) {
        this.fileDependencies.put(path, supplier);
    }

    public HashMap<String, ResourceSupplier> getFileDependencies() {
        return fileDependencies;
    }

    public HashSet<String> getCSS() {
        return this.css;
    }

    public HashSet<String> getJavascript() {
        return js;
    }

    /**
     * Write content to this page
     * @param string Content to write, raw HTML string
     * @return This object, for chaining
     * @throws IOException If a write error occurs
     */
    public abstract HtmlContext write(String string) throws IOException;
}
